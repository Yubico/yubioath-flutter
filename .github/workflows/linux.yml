name: Linux

on: [push, pull_request]

jobs:
  run-checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Read variables from repo
      run: cat .github/workflows/env >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYVER }}

    - name: Install Flutter dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -qq swig libpcsclite-dev build-essential
        sudo apt-get install -qq clang cmake ninja-build pkg-config libgtk-3-dev jq

    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: ${{ env.FLUTTER }}

    - name: Check app versions
      run: |
        python3 set-version.py
        git diff --exit-code

    - name: Run lints/tests
      run: |
        export PATH=$PATH:$HOME/.local/bin
        python3 -m pip install --upgrade pip
        pip install poetry pre-commit
        (cd helper && poetry install)
        pre-commit run --all-files
        flutter test

  build-helper:
    runs-on: ubuntu-latest
    container:
      image: python:3.12.2-slim-bullseye  # This need to be manually updates in sync with env
      env:
        DEBIAN_FRONTEND: noninteractive

    steps:

    - uses: actions/checkout@v4

    - name: Read variables from repo
      run: |
        cat .github/workflows/env >> $GITHUB_ENV
        PYVER_TEMP=`python --version`
        export PYVERINST=${PYVER_TEMP#* }
        echo "PYVERINST=$PYVERINST" >> $GITHUB_ENV

    - name: Verify Python version
      if: ${{ env.PYVERINST != env.PYVER }}
      run: |
        echo "Python version not compatible"
        echo "Installed python version: $PYVERINST"
        echo "Expected: $PYVER"
        exit 1

    - name: Calculate cache key
      run: echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
      env:
        CACHE_KEY: ${{ runner.os }}-py${{ env.PYVER }}-${{ hashFiles('helper/**') }}

    - name: Cache helper
      id: cache-helper
      uses: actions/cache@v4
      with:
        path: |
          build/linux/helper
          assets/licenses/helper.json
        key: ${{ env.CACHE_KEY }}

    - name: Build the Helper
      if: steps.cache-helper.outputs.cache-hit != 'true'
      working-directory: ./helper
      run: |
        apt-get update
        apt-get install -qq swig libpcsclite-dev build-essential
        pip install poetry
        poetry install
        poetry run pyinstaller authenticator-helper.spec
        find dist/helper -type f -exec chmod a-x {} +
        chmod a+x dist/helper/authenticator-helper
        mkdir -p ../build/linux
        mv dist/helper ../build/linux/
        poetry build
        python -m venv .venv
        .venv/bin/pip install --upgrade pip wheel
        .venv/bin/pip install dist/authenticator_helper-0.1.0-py3-none-any.whl pip-licenses
        mkdir licenses
        .venv/bin/pip-licenses --format=json --no-license-path --with-license-file --ignore-packages authenticator-helper zxing-cpp --output-file ../assets/licenses/helper.json

  build-app:

    needs: build-helper
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        DEBIAN_FRONTEND: noninteractive

    steps:

    - name: Install git
      run: |
        apt-get update
        apt-get install -qq curl software-properties-common
        add-apt-repository -y ppa:git-core/ppa
        apt-get install -qq git
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - uses: actions/checkout@v4

    - name: Read variables from repo
      run: cat .github/workflows/env >> $GITHUB_ENV

    - name: Cache helper
      id: cache-helper
      uses: actions/cache@v4
      with:
        path: |
          build/linux/helper
          assets/licenses/helper.json
        key: ${{ runner.os }}-py${{ env.PYVER }}-${{ hashFiles('helper/**') }}

    - name: Require the Helper
      if: steps.cache-helper.outputs.cache-hit != 'true'
      run: exit 1

    - name: Install Flutter dependencies
      run: |
        apt-get update
        apt-get install -qq libnotify-dev libayatana-appindicator3-dev patchelf
        apt-get install -qq clang cmake ninja-build pkg-config libgtk-3-dev jq

    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: ${{ env.FLUTTER }}

    - name: Configure Flutter
      run: |
        git config --global --add safe.directory /opt/hostedtoolcache/flutter/stable-$FLUTTER-x64
        flutter config --enable-linux-desktop
        flutter --version

    - name: Build the app
      run: flutter build linux

    - name: Check generated files
      run: git diff --exit-code

    - name: Embedd appindicator
      run: |
        patchelf --set-rpath '$ORIGIN' build/linux/x64/release/bundle/lib/libtray_manager_plugin.so
        cp -L /usr/lib/x86_64-linux-gnu/libayatana-appindicator3.so.1 build/linux/x64/release/bundle/lib/
        patchelf --set-rpath '$ORIGIN' build/linux/x64/release/bundle/lib/libayatana-appindicator3.so.1
        cp -L /usr/lib/x86_64-linux-gnu/libayatana-indicator3.so.7 build/linux/x64/release/bundle/lib/
        patchelf --set-rpath '$ORIGIN' build/linux/x64/release/bundle/lib/libayatana-indicator3.so.7
        cp -L /usr/lib/x86_64-linux-gnu/libdbusmenu-glib.so.4 build/linux/x64/release/bundle/lib/
        patchelf --set-rpath '$ORIGIN' build/linux/x64/release/bundle/lib/libdbusmenu-glib.so.4
        cp -L /usr/lib/x86_64-linux-gnu/libdbusmenu-gtk3.so.4 build/linux/x64/release/bundle/lib/
        patchelf --set-rpath '$ORIGIN' build/linux/x64/release/bundle/lib/libdbusmenu-gtk3.so.4

    - name: Rename and archive app
      run: |
        export REF=$(echo ${GITHUB_REF} | cut -d '/' -f 3)
        export BASENAME="yubioath-desktop-${REF}-linux"
        mkdir deploy
        mv build/linux/x64/release/bundle "build/${BASENAME}"
        tar -czf deploy/${BASENAME}.tar.gz -C build "${BASENAME}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: yubioath-desktop-linux
        path: deploy
